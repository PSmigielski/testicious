// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(uuid()) @db.Uuid
  name                 String                 @db.VarChar(100)
  surname              String                 @db.VarChar(100)
  phoneNumber          String                 @db.Char(9)
  password             String                 @db.Text
  email                String                 @unique @db.VarChar(100)
  role                 Role                   @default(USER)
  isVerified           Boolean                @default(false)
  VerifyRequest        VerifyRequest?
  RefreshToken         RefreshToken[]
  ResetPasswordRequest ResetPasswordRequest[]
  cart                 Cart?
}

model Cart {
  id      String    @id @default(uuid()) @db.Uuid
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String    @unique @db.Uuid
  items   Items[]
}

model Items {
  id      String      @id @default(uuid()) @db.Uuid
  cartId  String      @db.Uuid
  cart    Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  pizzaId String      @db.Uuid
  pizza   Pizza       @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
}

enum Role{
  USER
  ADMIN
}

model Pizza {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @db.VarChar(100)
  price     Decimal       @db.Money
  toppings  String[]      @db.VarChar(100)
  item      Items[]     
}

model VerifyRequest {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model ResetPasswordRequest {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model RefreshToken {
  id     String @id @default(uuid()) @db.Uuid
  token  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
}