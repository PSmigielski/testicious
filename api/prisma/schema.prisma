// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(uuid()) @db.Uuid
  name                 String                 @db.VarChar(100)
  surname              String                 @db.VarChar(100)
  phoneNumber          String                 @db.Char(9)
  password             String                 @db.Text
  email                String                 @unique @db.VarChar(100)
  role                 Role                   @default(USER)
  isVerified           Boolean                @default(false)
  VerifyRequest        VerifyRequest?
  RefreshToken         RefreshToken[]
  ResetPasswordRequest ResetPasswordRequest[]
  cart                 Cart[]
  transactions         Transaction[]
}

model Topping {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @db.VarChar(100) @unique
  price     Decimal       @db.Money
  products  ToppingsOnPizzas[]
}

model Category {
  id      String        @id @default(uuid()) @db.Uuid
  name    String        @unique @db.VarChar(100)
  products  Product[]
}


model Cart {
  id       String    @id @default(uuid()) @db.Uuid
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @unique @db.Uuid
  items    CartItem[]
  isActive Boolean @default(true) @db.Boolean
  overallPrice  Decimal @db.Money @default(0)
  transaction  Transaction?
}

model CartItem {
  id        String      @id @default(uuid()) @db.Uuid
  cartId    String      @db.Uuid
  quantity  Int         @db.Integer
  cart      Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String      @db.Uuid
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Role{
  USER
  ADMIN
}

model Discount {
  id             String    @id @default(uuid()) @db.Uuid
  code           String    @db.VarChar(20) @unique
  precent        Int       @db.Integer 
  expirationDate DateTime  @db.Date
  transaction    Transaction[]
}

model Transaction {
  id      String @id @default(uuid()) @db.Uuid
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @db.Uuid
  cart    Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId  String @db.Uuid
  appliedDiscount Discount? @relation(fields: [appliedDiscountId], references: [id], onDelete: Cascade)
  appliedDiscountId String? @db.Uuid
  name              String? @db.VarChar(100)
  surname           String? @db.VarChar(100)
  phoneNumber       String? @db.Char(9)
  city              String? @db.VarChar(100)
  streetNumber      Int?     @db.Integer
  street            String?  @db.VarChar(100)
  email             String?   @db.VarChar(100)
}

model Product { 
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @db.VarChar(100) @unique
  price     Decimal       @db.Money
  imageUrl  String        @db.VarChar(200) @unique
  toppings  ToppingsOnPizzas[]
  item      CartItem[]
  category  Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String      @db.Uuid 
}
model ToppingsOnPizzas{
  item          Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String  @db.Uuid
  topping       Topping   @relation(fields: [toppingId], references: [id], onDelete: Cascade)
  toppingId     String   @db.Uuid

  @@id([productId, toppingId])
}

model VerifyRequest {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model ResetPasswordRequest {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model RefreshToken {
  id     String @id @default(uuid()) @db.Uuid
  token  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
}